{"version":3,"sources":["CountBtn.js","Counter.js","CounterList.js","App.js","serviceWorker.js","index.js"],"names":["CountBtn","props","onClick","updateCounter","value","count","className","Counter","useState","setCount","n","CounterList","numberOfCounters","setNumberOfCounters","style","listStyle","Array","keys","map","el","id","key","marginLeft","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAiBeA,MAbf,SAAkBC,GAMd,OAEI,4BAAQC,QANC,WACTD,EAAME,cAAcF,EAAMG,MAAQH,EAAMI,QAKjBC,UAAU,wBAAwBL,EAAMG,QCgBxDG,MAxBf,SAAiBN,GAAQ,IAAD,EAEMO,mBAAS,GAFf,mBAEbH,EAFa,KAENI,EAFM,KAIdN,EAAgB,SAACO,GACnBD,EAASC,IAGb,OACI,6BAEI,kBAAC,EAAD,CAAUN,OAAQ,EAAGC,MAAOA,EAAOF,cAAeA,IAClD,kBAAC,EAAD,CAAUC,OAAQ,EAAGC,MAAOA,EAAOF,cAAeA,IAClD,kBAAC,EAAD,CAAUC,OAAQ,EAAGC,MAAOA,EAAOF,cAAeA,IACnD,0BAAMG,UAAU,UAAUD,GACzB,kBAAC,EAAD,CAAUD,MAAO,EAAGC,MAAOA,EAAOF,cAAeA,IACjD,kBAAC,EAAD,CAAUC,MAAO,EAAGC,MAAOA,EAAOF,cAAeA,IACjD,kBAAC,EAAD,CAAUC,MAAO,EAAGC,MAAOA,EAAOF,cAAeA,MCyB9CQ,MAzCf,SAAqBV,GAAQ,IAAD,EACwBO,mBAAS,GADjC,mBACjBI,EADiB,KACCC,EADD,KAsBxB,OACI,yBAAKP,UAAU,eAEX,wBAAIQ,MAAO,CAACC,UAAW,SAClB,YAAIC,MAAMJ,GAAkBK,QAAQC,KAAI,SAACC,EAAIC,GAAL,OAAY,wBAAIC,IAAKD,GAAI,kBAAC,EAAD,WAKtE,yBAAKN,MAAO,CAACQ,WAAY,SACrB,4BAAQpB,QA7BD,WACfW,EAAoBD,EAAmB,IA4BFN,UAAU,wBAAvC,KACA,4BAAQJ,QA1BE,WAClB,GAAIU,GAAoB,EACpB,OAAOA,EAEPC,EAAoBD,EAAmB,IAsBHN,UAAU,wBAA1C,QCrBDiB,MAZf,WAGI,OACI,yBAAKjB,UAAU,OAEX,kBAAC,EAAD,QCCQkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2fc9bb2b.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nfunction CountBtn(props) {\n\n    const send = () => {\n        props.updateCounter(props.value + props.count)\n    };\n\n    return (\n\n        <button onClick={send} className=\"btn btn-outline-info\">{props.value}</button>\n)\n    ;\n}\n\nexport default CountBtn;\n","import React, {useState} from 'react';\nimport CountBtn from \"./CountBtn\";\n\n\nfunction Counter(props) {\n\n    const [count, setCount] = useState(5);\n\n    const updateCounter = (n) => {\n        setCount(n);\n    };\n\n    return (\n        <div>\n\n            <CountBtn value={-3} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={-2} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={-1} count={count} updateCounter={updateCounter}/>\n           <span className=\"button\">{count}</span>\n            <CountBtn value={1} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={2} count={count} updateCounter={updateCounter}/>\n            <CountBtn value={3} count={count} updateCounter={updateCounter}/>\n\n\n        </div>\n    );\n}\n\nexport default Counter;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Counter from \"./Counter\";\n\n\nfunction CounterList(props) {\n    const [numberOfCounters, setNumberOfCounters] = useState(1);\n\n    const addCounter = () => {\n        setNumberOfCounters(numberOfCounters + 1);\n    };\n\n    const deleteCounter = () => {\n        if (numberOfCounters <= 1) {\n            return numberOfCounters;\n        } else {\n            setNumberOfCounters(numberOfCounters - 1)\n        }\n\n    };\n\n\n    // const arrCounters = [];\n    // for (let i = 1; i <= numberOfCounters; i++) {\n    //     arrCounters.push(<Counter/>)\n    // };\n\n    return (\n        <div className=\"CounterList\">\n\n            <ul style={{listStyle: \"none\"}}>\n                {[...Array(numberOfCounters).keys()].map((el, id) => <li key={id}><Counter/></li>)}\n\n                {/*{arrCounters}*/}\n            </ul>\n\n            <div style={{marginLeft: '50px'}}>\n                <button onClick={addCounter} className=\"btn btn-outline-info\">+</button>\n                <button onClick={deleteCounter} className=\"btn btn-outline-info\">-</button>\n\n            </div>\n        </div>\n    )\n        ;\n}\n\nexport default CounterList;\n","import React from 'react';\nimport './App.css';\nimport CounterList from \"./CounterList\";\n\n\nfunction App() {\n\n\n    return (\n        <div className=\"App\">\n\n            <CounterList/>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}